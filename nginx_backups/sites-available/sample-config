##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration

server {
	listen 8882;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	server_name 10.10.0.193:8882;
	root /var/www/html/archive;
	access_log /var/www/html/<dir-goes-here></dir-goes-here>/logs/nginx_access.log;
	error_log  /var/www/html/<dir-goes-here>/logs/nginx_error.log error;

	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;


	client_body_buffer_size     1024M;
	client_max_body_size        1024M;
	client_header_buffer_size   256M;
	large_client_header_buffers 4 4k;
	output_buffers              1 32k;
	postpone_output             1460;

	include global/restrictions.conf;

	#    [ Extra rules ]
	# =====================

	location ~ ^/wp-content/uploads/(.*)$ {
		try_files $uri $uri/uploads/$1 @local @archive;
	}

    #location @local {
    #    return 301 $scheme://172.28.128.3:8082/uploads/$1;
    #    #rewrite ^/wp-content/uploads/(.*)$ <site-goes-here>/uploads/$1 permanent;
    #}

	location @archive {
		return 301 $scheme://<site-goes-here>/uploads/$1;
		#rewrite ^/wp-content/uploads/(.*)$ <site-goes-here>/uploads/$1 permanent;
	}

	# =====================

	include global/wordpress.conf;

	#location / {
	#	# First attempt to serve request as file, then
	#	# as directory, then fall back to displaying a 404.
	#	try_files $uri $uri/ =404;
	#}

	# pass PHP scripts to FastCGI server
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;

	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	#fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
